networks:
  internal_network:
    driver: bridge
  gateway_network:
    driver: bridge

services:
  discovery-service:
    image: discovery-service:latest
#    build:
#      context: ./backend/discovery-service
#      dockerfile: ../docker/Dockerfile
#    volumes:
#      - gradle-cache:/root/.gradle
    networks:
      - internal_network

  api-gateway-service:
    image: api-gateway-service:latest
#    build:
#      context: ./backend/api-gateway-service
#      dockerfile: ../docker/Dockerfile
#    volumes:
#      - gradle-cache:/root/.gradle
    networks:
      - internal_network
      - gateway_network
    ports:
      - "8080:8080"
    environment:
      - SPRING_EUREKA_DEFAULT_ZONE=discovery-service

  auth-service:
    image: auth-service:latest
#    build:
#      context: ./backend/auth-service
#      dockerfile: ../docker/Dockerfile
#    volumes:
#      - gradle-cache:/root/.gradle
    networks:
      - internal_network
    depends_on:
      - discovery-service
      - user-service
    environment:
      - SPRING_EUREKA_DEFAULT_ZONE=discovery-service
      - POSTGRES_DB_NAME=finance_app_db
      - POSTGRES_DB_USERNAME=aboba
      - POSTGRES_DB_PASSWORD=aboba
      - POSTGRES_DB_HOST=postgres_db
      - POSTGRES_DB_PORT=5432

  user-service:
    image: user-service:latest
#    build:
#      context: ./backend/user-service
#      dockerfile: ../docker/Dockerfile
#    volumes:
#      - gradle-cache:/root/.gradle
    networks:
      - internal_network
    depends_on:
      - discovery-service
    environment:
      - SPRING_EUREKA_DEFAULT_ZONE=discovery-service
      - POSTGRES_DB_NAME=finance_app_db
      - POSTGRES_DB_USERNAME=aboba
      - POSTGRES_DB_PASSWORD=aboba
      - POSTGRES_DB_HOST=postgres_db
      - POSTGRES_DB_PORT=5432


  transaction-service:
    image: transaction-service:latest
#    build:
#      context: ./backend/transaction-service
#      dockerfile: ../docker/Dockerfile
#    volumes:
#      - gradle-cache:/root/.gradle
    networks:
      - internal_network
    depends_on:
      - discovery-service
      - user-service
      - kafka
    environment:
      - SPRING_EUREKA_DEFAULT_ZONE=discovery-service
      - POSTGRES_DB_NAME=finance_app_db
      - POSTGRES_DB_USERNAME=aboba
      - POSTGRES_DB_PASSWORD=aboba
      - POSTGRES_DB_HOST=postgres_db
      - POSTGRES_DB_PORT=5432


  constraint-service:
    image: constraint-service:latest
#    build:
#      context: ./backend/constraint-service
#      dockerfile: ../docker/Dockerfile
#    volumes:
#      - gradle-cache:/root/.gradle
    networks:
      - internal_network
    depends_on:
      - discovery-service
      - kafka
    environment:
      - SPRING_EUREKA_DEFAULT_ZONE=discovery-service
      - POSTGRES_DB_NAME=finance_app_db
      - POSTGRES_DB_USERNAME=aboba
      - POSTGRES_DB_PASSWORD=aboba
      - POSTGRES_DB_HOST=postgres_db
      - POSTGRES_DB_PORT=5432


  analytics-service:
    image: analytics-service:latest
#    build:
#      context: ./backend/analytics-service
#      dockerfile: ../docker/Dockerfile
#    volumes:
#      - gradle-cache:/root/.gradle
    networks:
      - internal_network
    depends_on:
      - discovery-service
      - kafka
    environment:
      - SPRING_EUREKA_DEFAULT_ZONE=discovery-service

  notification-service:
    image: notification-service:latest
    #    build:
    #      context: ./backend/analytics-service
    #      dockerfile: ../docker/Dockerfile
    #    volumes:
    #      - gradle-cache:/root/.gradle
    networks:
      - internal_network
    depends_on:
      - discovery-service
      - kafka
    environment:
      - SPRING_EUREKA_DEFAULT_ZONE=discovery-service

  postgres_db:
    image: postgres:13.15-alpine
    networks:
      - internal_network
    environment:
      POSTGRES_DB: "finance_app_db"
      POSTGRES_USER: "aboba"
      POSTGRES_PASSWORD: "aboba"
    expose:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U aboba -d finance_app_db" ]
      interval: 5s
      timeout: 5s
      retries: 2
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  zookeeper:
    image: bitnami/zookeeper:3.9.3
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - internal_network
    expose:
      - 2181:2181
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - zookeeper-data:/bitnami

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    restart: unless-stopped
    networks:
      - internal_network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

    expose:
      - 3000:3000
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/bitnami

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: ./dockerfile
  #   networks:
  #     - gateway_network
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - api-gateway-service
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://api-gateway-service:8080

volumes:
  postgres-data:
  gradle-cache:
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local
